#version 460
#extension GL_EXT_ray_tracing : enable

#include "include/bindless.glsl"
#include "include/view.glsl"
#include "include/atmosphere.glsl"
#include "include/random.glsl"
#include "include/restir_sampling.glsl"
#include "payload.glsl"

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(std430, set = 2, binding = 1) buffer ReservoirSSBO
{
   Reservoir reservoirs[];
} reservoirSSBO;
layout(set = 2, binding = 2, rgba8) uniform image2D output_image;
layout(set = 2, binding = 3, rgba32f) uniform image2D accumulation_image;

layout(location = 0) rayPayloadEXT Payload rayPayload;
layout(location = 1) rayPayloadEXT Payload shadowRayPayload;

void main()
{
   uint rngState = initRNG(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, view.total_samples);

   vec3 pixelColor = vec3(0.0);

   for (uint s = 0; s < view.samples_per_frame; s++)
   {
      rayPayload.randomSeed = rngState;
      const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(randomFloat(rngState), randomFloat(rngState));
      vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
      inUV.y = 1.0 - inUV.y;
      vec2 d = inUV * 2.0 - 1.0;

      vec4 origin = view.inverse_view * vec4(0,0,0,1);
      vec4 target = view.inverse_projection * vec4(d.x, d.y, 1, 1) ;
      vec4 direction = view.inverse_view * vec4(normalize(target.xyz), 0) ;
      vec3 radiance = vec3(0.0);
      vec3 throughput = vec3(1.0);
  
      for (uint b = 0; b < view.num_bounces; b++)
      {
         float tmin = 0.001;
         float tmax = 10000.0;

         traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
         throughput *= rayPayload.colorDistance.rgb;
         const float hitDistance = rayPayload.colorDistance.w;
         const bool isScattered = bool(rayPayload.scatterDirection.w);

         // Hit sky
         if (hitDistance < 0 || !isScattered)
         {
            radiance += throughput;
            break;
         }

         origin = origin + hitDistance * direction;
         origin.xyz = offsetRay(origin.xyz, rayPayload.normal.xyz);
         direction = vec4(rayPayload.scatterDirection.xyz, 0.0);

         if (view.sun_shadow_enabled == 1) {
            vec3 sun_dir = normalize(view.sun_dir);

            // Todo: shall use gl_RayFlagsSkipClosestHitShaderEXT and gl_RayFlagsTerminateOnFirstHitEXT
            traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                        0xff, 0, 0, 0, origin.xyz, tmin, sun_dir, tmax, 1);
            if (shadowRayPayload.colorDistance.w == -1) {
               #ifdef COLOR_FROM_SUN_EXPERIMENT
                  // Experimentation using color from the sun
                  vec3 transmittance;
                  vec3 sky_color = IntegrateScattering(origin.xyz, -sun_dir, 999999999.0f, sun_dir, vec3(1.0), transmittance);
                  radiance += 0.2 * throughput * min(sky_color, vec3(1.0)); // 0.2 is a magic constant to not make it too bright
               #else
                  radiance += throughput;
               #endif // COLOR_FROM_SUN_EXPERIMENT
            }
         }

         if (view.lights_enabled == 1) {
            Light light;
            int light_index = 0;
            float light_sample_weight = 0.0;
            float total_weights = 1.0;

            if (gl_LaunchIDEXT.x > gl_LaunchSizeEXT.x / 2 && view.use_ris_light_sampling == 1)
            {
               // Reference that only uses RIS for light sampling to the left
               if (gl_LaunchIDEXT.x < gl_LaunchSizeEXT.x / 2) {
                  Reservoir reservoir = resample(rngState, origin.xyz);
                  light = lightsSSBO.lights[reservoir.Y];
                  light_sample_weight = reservoir.W_X;
                  total_weights = reservoir.W_sum;
                  light_index = reservoir.Y;
               }
               else {
                  Reservoir reservoir = reservoirSSBO.reservoirs[gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x];
                  light = lightsSSBO.lights[reservoir.Y];
                  light_sample_weight = reservoir.W_X;
                  total_weights = reservoir.W_sum;
                  light_index = reservoir.Y;
               }
            }
            else
            {
               sample_light_uniform(rngState, light_index, light_sample_weight);
               light_sample_weight = 1.0 / light_sample_weight;
               light = lightsSSBO.lights[light_index];
            }

            if (total_weights != 0.0) {
               vec3 light_dir = normalize(light.pos - origin.xyz);
               float distance_to_light = distance(light.pos, origin.xyz);
               traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                        0xff, 0, 0, 0, origin.xyz, tmin, light_dir, tmax, 1);

               if(shadowRayPayload.colorDistance.w > distance_to_light
                  || shadowRayPayload.colorDistance.w == -1)
               {
                  radiance += throughput * target_function(light_index, origin.xyz) * light_sample_weight;
               }
            }
         }
      }

      pixelColor += radiance;
   }

   vec3 accumulatedColor = vec3(0.0);
   if (view.total_samples != view.samples_per_frame)
   {
      accumulatedColor = imageLoad(accumulation_image, ivec2(gl_LaunchIDEXT.xy)).rgb;
   }

   if (view.total_samples <= view.accumulation_limit) {
      accumulatedColor += pixelColor;
   }

   pixelColor = accumulatedColor / min(view.total_samples, view.accumulation_limit);
   pixelColor = linearToSrgb(pixelColor);

   imageStore(accumulation_image, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));
   imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0.0));
}
