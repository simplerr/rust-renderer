#version 460
#extension GL_EXT_ray_tracing : enable

#include "include/bindless.glsl"
#include "include/view.glsl"
#include "include/atmosphere.glsl"
#include "payload.glsl"
#include "random.glsl"

layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 2, binding = 1, rgba8) uniform image2D output_image;
layout(set = 2, binding = 2, rgba32f) uniform image2D accumulation_image;

layout(location = 0) rayPayloadEXT Payload rayPayload;
layout(location = 1) rayPayloadEXT Payload shadowRayPayload;

void main()
{
   uint rngState = gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y + gl_LaunchIDEXT.x;

   // To get different RNG for every sample
   rngState *= view.total_samples;

   vec3 pixelColor = vec3(0.0);

   for (uint s = 0; s < view.samples_per_frame; s++)
   {
      rayPayload.randomSeed = rngState;
      const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(randomFloat(rngState), randomFloat(rngState));
      vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
      inUV.y = 1.0 - inUV.y;
      vec2 d = inUV * 2.0 - 1.0;

      vec4 origin = view.inverse_view * vec4(0,0,0,1);
      vec4 target = view.inverse_projection * vec4(d.x, d.y, 1, 1) ;
      vec4 direction = view.inverse_view * vec4(normalize(target.xyz), 0) ;
      vec3 radiance = vec3(0.0);
      vec3 throughput = vec3(1.0);
  
      for (uint b = 0; b < view.num_bounces; b++)
      {
         float tmin = 0.001;
         float tmax = 10000.0;

         traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
         throughput *= rayPayload.colorDistance.rgb;
         const float hitDistance = rayPayload.colorDistance.w;
         const bool isScattered = bool(rayPayload.scatterDirection.w);

         // Hit sky
         if (hitDistance < 0 || !isScattered)
         {
            radiance += throughput;
            break;
         }

         origin = origin + hitDistance * direction;
         origin.xyz = offsetRay(origin.xyz, rayPayload.normal.xyz);
         direction = vec4(rayPayload.scatterDirection.xyz, 0.0);

         // Optimize by only tracing shadow rays for the first bounce
         // Todo: is this common to do? Any cleaner way to do this?
         if (b == 0)
         {
// Some defines just for quick testing
#define SUN_SHADOW_RAY 1
#define POINT_LIGHT_SHADOW_RAYS 1
#define COLOR_FROM_SUN_EXPERIMENT 1

#if SUN_SHADOW_RAY
            vec3 sun_dir = normalize(view.sun_dir);

            // Todo: shall use gl_RayFlagsSkipClosestHitShaderEXT and gl_RayFlagsTerminateOnFirstHitEXT
            traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                        0xff, 0, 0, 0, origin.xyz, tmin, sun_dir, tmax, 1);
            if (shadowRayPayload.colorDistance.w == -1) {
#if COLOR_FROM_SUN_EXPERIMENT
               // Experimentation using color from the sun
               vec3 transmittance;
               vec3 sky_color = IntegrateScattering(origin.xyz, -sun_dir, 999999999.0f, sun_dir, vec3(1.0), transmittance);
               radiance += 0.2 * throughput * min(sky_color, vec3(1.0)); // 0.2 is a magic constant to not make it too bright
#else
               radiance += throughput;
#endif // COLOR_FROM_SUN_EXPERIMENT
         }
#endif // SUN_SHADOW_RAY

#if POINT_LIGHT_SHADOW_RAYS
            uint num_used_lights = 1;//view.num_lights;
            int light_index = int(randomFloat(rngState) * float(num_used_lights));
            vec3 light_pos = lightsSSBO.lights[light_index].pos;
            vec3 light_dir = normalize(light_pos - origin.xyz);
            float distance_to_light = distance(light_pos, origin.xyz);
            traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                     0xff, 0, 0, 0, origin.xyz, tmin, light_dir, tmax, 1);

            if(shadowRayPayload.colorDistance.w > distance_to_light
               || shadowRayPayload.colorDistance.w == -1) {
               const float intensity = 10.0;
               const float weight = 1.0 / float(num_used_lights);
               radiance += throughput * (1.0 / pow(distance_to_light, 2.0)) * intensity / weight;
            }
#endif // POINT_LIGHT_SHADOW_RAYS
         }
      }

      pixelColor += radiance;
   }

   vec3 accumulatedColor = vec3(0.0);
   if (view.total_samples != view.samples_per_frame)
   {
      accumulatedColor = imageLoad(accumulation_image, ivec2(gl_LaunchIDEXT.xy)).rgb;
   }

   accumulatedColor += pixelColor;

   pixelColor = accumulatedColor / view.total_samples;
   pixelColor = linearToSrgb(pixelColor);

   imageStore(accumulation_image, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));
   imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0.0));
}
