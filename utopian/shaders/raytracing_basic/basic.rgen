#version 460
#extension GL_EXT_ray_tracing : enable

#include "include/bindless.glsl"
#include "payload.glsl"
#include "random.glsl"

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D output_image;
layout(binding = 2, set = 1, rgba32f) uniform image2D accumulation_image;
layout(binding = 3, set = 1) uniform CameraProperties
{
   mat4 view;
   mat4 projection;
   mat4 inverse_view;
   mat4 inverse_projection;
   vec3 eye_pos;
   uint samples_per_frame;
   uint total_samples;
   uint num_bounces;
} camera;

layout(location = 0) rayPayloadEXT Payload rayPayload;
layout(location = 1) rayPayloadEXT Payload shadowRayPayload;

float luminance(vec3 rgb)
{
   // Coefficents from the BT.709 standard
   return dot(rgb, vec3(0.2126f, 0.7152f, 0.0722f));
}

float linearToSrgb(float linearColor)
{
   if (linearColor < 0.0031308f) {
      return linearColor * 12.92f;
   }
   else {
      return 1.055f * float(pow(linearColor, 1.0f / 2.4f)) - 0.055f;
   }
}

vec3 linearToSrgb(vec3 linearColor)
{
   return vec3(linearToSrgb(linearColor.x), linearToSrgb(linearColor.y), linearToSrgb(linearColor.z));
}

void main()
{
   uint rngState = gl_LaunchSizeEXT.x * gl_LaunchIDEXT.y + gl_LaunchIDEXT.x;

   // To get different RNG for every sample
   rngState *= camera.total_samples;

   vec3 pixelColor = vec3(0.0);

   for (uint s = 0; s < camera.samples_per_frame; s++)
   {
      rayPayload.randomSeed = rngState;
      const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(randomFloat(rngState), randomFloat(rngState));
      vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
      inUV.y = 1.0 - inUV.y;
      vec2 d = inUV * 2.0 - 1.0;

      vec4 origin = camera.inverse_view * vec4(0,0,0,1);
      vec4 target = camera.inverse_projection * vec4(d.x, d.y, 1, 1) ;
      vec4 direction = camera.inverse_view * vec4(normalize(target.xyz), 0) ;
      vec3 radiance = vec3(0.0);
      vec3 throughput = vec3(1.0);
  
      for (uint b = 0; b < camera.num_bounces; b++)
      {
         float tmin = 0.001;
         float tmax = 10000.0;

         traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
         throughput *= rayPayload.colorDistance.rgb;
         const float hitDistance = rayPayload.colorDistance.w;
         const bool isScattered = bool(rayPayload.scatterDirection.w);

         // Hit sky
         if (hitDistance < 0 || !isScattered)
         {
            radiance += throughput;
            break;
         }

         origin = origin + hitDistance * direction;
         direction = vec4(rayPayload.scatterDirection.xyz, 0.0);

#if !SHADOW_RAY
         vec3 light_dir = vec3(0.0, 0.9, 0.1);

         // Directional light
         // Todo: shall use gl_RayFlagsSkipClosestHitShaderEXT and gl_RayFlagsTerminateOnFirstHitEXT
         traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                     0xff, 0, 0, 0, origin.xyz, tmin, light_dir, tmax, 1);
         if (shadowRayPayload.colorDistance.w == -1) {
            radiance += throughput;
         }

         // Point light
         // vec3 light_pos = vec3(-7.0, 1.0, 0.0);
         // light_dir = normalize(light_pos - origin.xyz);
         // traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
         //             0xff, 0, 0, 0, origin.xyz, tmin, light_dir, tmax, 1);
         // if (shadowRayPayload.colorDistance.w > distance(light_pos, origin.xyz)
         //     || shadowRayPayload.colorDistance.w == -1) {
         //    radiance += throughput;
         // }
#endif
      }

      pixelColor += radiance;
   }

   vec3 accumulatedColor = vec3(0.0);
   if (camera.total_samples != camera.samples_per_frame)
   {
      accumulatedColor = imageLoad(accumulation_image, ivec2(gl_LaunchIDEXT.xy)).rgb;
   }

   accumulatedColor += pixelColor;

   pixelColor = accumulatedColor / camera.total_samples;
   pixelColor = linearToSrgb(pixelColor);

   imageStore(accumulation_image, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0.0));
   imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0.0));
}
