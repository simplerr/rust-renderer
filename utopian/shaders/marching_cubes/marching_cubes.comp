#version 450
#extension GL_GOOGLE_include_directive : enable

#include "include/bindless.glsl"
#include "include/view.glsl"
#include "tables.glsl"
#include "noise.glsl"

// layout (set = 0, binding = 0) uniform itexture2D edgeTableTex;
// layout (set = 0, binding = 1) uniform itexture2D triangleTableTex;
// layout (set = 0, binding = 2) uniform sampler3D sdfImage;

// layout(push_constant) uniform PushConsts {
//    mat4 world;
//    vec4 color;
// } pushConsts;

// Corresponds to VkDrawIndirectCommand
struct DrawCommand
{
  uint vertexCount;
  uint instanceCount;
  uint firstVertex;
  uint firstInstance;
};

layout(std430, set = 3, binding = 0) buffer DrawCommandSSBO
{
   DrawCommand drawCommand;
} drawCommandSSBO;

layout(std430, set = 3, binding = 1) buffer VertexSSBO
{
   Vertex vertices[];
} vertexSSBO;

layout (set = 4, binding = 0) uniform UBO_input
{
   vec4 offsets[8];
   vec4 color;
   float voxelSize;
   float viewDistance;
   int voxelsInBlock;
   bool flatNormals;
} ubo;

const vec3 origin = vec3(0.0f);

vec3 getOrigin()
{
   return origin;
}

vec3 toOrigin(vec3 pos)
{
   return pos + origin;
}

float sdSphere(vec3 p, float s)
{
   return length(p)-s;
}

float sdTorus(vec3 p, vec2 t)
{
   vec2 q = vec2(length(p.xz)-t.x,p.y);
   return length(q)-t.y;
}

float sdCone(vec3 p, vec2 c)
{
   // c must be normalized
   float q = length(p.xy);
   return dot(c,vec2(q,p.z));
}

float sdBox(vec3 p, vec3 b)
{
   vec3 d = abs(p) - b;
   return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float addShapes(vec3 pos, float density)
{
   float finalDensity = max(-sdTorus(pos - toOrigin(vec3(10, 20, 10)), vec2(5, 3)), density);
   finalDensity = max(-sdBox(pos - toOrigin(vec3(10)), vec3(5)), finalDensity);
   finalDensity = max(-sdSphere(pos - toOrigin(vec3(10, 26, 10)), 8.0 * abs(sin(view.time * 0.3))), finalDensity);

   return finalDensity;
}

float density(vec3 pos)
{
   float density = -1; //getOrigin().y - pos.y - 4 * blockSize;

   density = addShapes(pos, density);

   // Generate Noise
#if 0
   density = max(-noised(pos / 300).x + 0.37, density);
#endif

   // Generate Fbm
#if 0
   density = max(-fbm(pos / 500.0f).x + 0.37, density);
#endif

   // Noise from 3D texture
#if 0
   // The UV calculation is hardcoded for a viewing distance of 8 and origin at (800, 800, 800)
   const float blockSize = ubo.voxelsInBlock * ubo.voxelSize;
   const vec3 uv = vec3((pos - (800 - ubo.viewDistance) * blockSize) / (ubo.viewDistance * 2 * blockSize));

   float noise3d = texture(sampler3D(sdfImage, defaultSampler), uv / 1.0f).r;
   density = max(noise3d, density);
#endif

   return density;
}

vec3 worldCoordinate()
{
   // Todo: use push constants
   mat4 world = mat4(1.0);
   return (world * vec4(gl_GlobalInvocationID.xyz * ubo.voxelSize, 1.0)).xyz;
}

float density(int corner)
{
   vec3 pos = worldCoordinate() + ubo.offsets[corner].xyz;
   return density(pos);
}

vec3 vertexInterp(float isolevel, vec3 pos1, vec3 pos2, float val1, float val2)
{
   return mix(pos1, pos2, (isolevel-val1)/(val2-val1));
}

vec3 cornerPos(vec3 pos, int corner)
{
   return pos + ubo.offsets[corner].xyz;
}

vec3 cornerPos(int corner)
{
   return gl_GlobalInvocationID.xyz * ubo.voxelSize + ubo.offsets[corner].xyz;
} 

int edgeTableValue(int cubeIndex)
{
   //return texelFetch(edgeTableTex, ivec2(cubeIndex, 0), 0).r;
   return edgeTable[cubeIndex];
}

int triangleTableValue(int cubeIndex, int i)
{
   //return texelFetch(triangleTableTex, ivec2(i, cubeIndex), 0).r;
   return triangleTable[cubeIndex][i];
}

vec3 generateNormal(vec3 pos)
{
   // Todo: use push constants
   mat4 world = mat4(1.0);
   pos = (world * vec4(pos, 1.0f)).xyz;
   vec3 grad;

   // Tuning this is important when changing voxel size
   float d = 1.0f / 1.0f;

   grad.x = density(pos + vec3(d, 0, 0)) - density(pos + vec3(-d, 0, 0));
   grad.y = density(pos + vec3(0, d, 0)) - density(pos + vec3(0, -d, 0));
   grad.z = density(pos + vec3(0, 0, d)) - density(pos + vec3(0, 0, -d));

   vec3 normal = -normalize(grad);
   return normal;
}

void main(void)
{
   vec3 pos = worldCoordinate();
   float isoLevel = 0.0f;

   int cubeIndex = 0;
   for(int i = 0; i < 8; i++)
   {
      if(density(pos + ubo.offsets[i].xyz) < isoLevel) {
         cubeIndex |= (1 << i);
      }
   }

   // if (cubeIndex != 255 && cubeIndex != 0) {
   //    atomicAdd(counterSSBO.vertexCount, 1);
   // }

   // if (cubeIndex != 255) {
   //       counterSSBO.vertexCount = cubeIndex;
   // }

   // No interesction with the isosurface in the cube
   //if(texelFetch(edgeTableTex, ivec2(cubeIndex, 0), 0).r != 0)
   if(edgeTable[cubeIndex] != 0)
   {
      //counterSSBO.vertexCount = 12345;
      vec3 vertList[12];

      if((edgeTableValue(cubeIndex) & 1) != 0)
         vertList[0] = vertexInterp(isoLevel, cornerPos(0), cornerPos(1), density(0), density(1));
      if((edgeTableValue(cubeIndex) & 2) != 0)
         vertList[1] = vertexInterp(isoLevel, cornerPos(1), cornerPos(2), density(1), density(2));
      if((edgeTableValue(cubeIndex) & 4) != 0)
         vertList[2] = vertexInterp(isoLevel, cornerPos(2), cornerPos(3), density(2), density(3));
      if((edgeTableValue(cubeIndex) & 8) != 0)
         vertList[3] = vertexInterp(isoLevel, cornerPos(3), cornerPos(0), density(3), density(0));
      if((edgeTableValue(cubeIndex) & 16) != 0)
         vertList[4] = vertexInterp(isoLevel, cornerPos(4), cornerPos(5), density(4), density(5));
      if((edgeTableValue(cubeIndex) & 32) != 0)
         vertList[5] = vertexInterp(isoLevel, cornerPos(5), cornerPos(6), density(5), density(6));
      if((edgeTableValue(cubeIndex) & 64) != 0)
         vertList[6] = vertexInterp(isoLevel, cornerPos(6), cornerPos(7), density(6), density(7));
      if((edgeTableValue(cubeIndex) & 128) != 0)
         vertList[7] = vertexInterp(isoLevel, cornerPos(7), cornerPos(4), density(7), density(4));
      if((edgeTableValue(cubeIndex) & 256) != 0)
         vertList[8] = vertexInterp(isoLevel, cornerPos(0), cornerPos(4), density(0), density(4));
      if((edgeTableValue(cubeIndex) & 512) != 0)
         vertList[9] = vertexInterp(isoLevel, cornerPos(1), cornerPos(5), density(1), density(5));
      if((edgeTableValue(cubeIndex) & 1024) != 0)
         vertList[10] = vertexInterp(isoLevel, cornerPos(2), cornerPos(6), density(2), density(6));
      if((edgeTableValue(cubeIndex) & 2048) != 0)
         vertList[11] = vertexInterp(isoLevel, cornerPos(3), cornerPos(7), density(3), density(7));

      mat4 viewProjection = view.projection * view.view;
      vec3 position = vec3(0.0);
      vec3 normal = vec3(0.0);
      for(int i = 0; triangleTableValue(cubeIndex, i) != -1; i += 3)
      {
         uint index = atomicAdd(drawCommandSSBO.drawCommand.vertexCount, 3);

         position = vertList[triangleTableValue(cubeIndex, i)];
         normal = generateNormal(position);
         vertexSSBO.vertices[index].pos = vec4(position, 1);
         vertexSSBO.vertices[index].normal = vec4(normal, 1);

         position = vertList[triangleTableValue(cubeIndex, i + 1)];
         normal = ubo.flatNormals ? normal : generateNormal(position);
         vertexSSBO.vertices[index + 1].pos = vec4(position, 1);
         vertexSSBO.vertices[index + 1].normal = vec4(normal, 1);

         position = vertList[triangleTableValue(cubeIndex, i + 2)];
         normal = ubo.flatNormals ? normal : generateNormal(position);
         vertexSSBO.vertices[index + 2].pos = vec4(position, 1);
         vertexSSBO.vertices[index + 2].normal = vec4(normal, 1);
      }
   }
}