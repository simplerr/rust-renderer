#version 460
#extension GL_EXT_ray_tracing : enable

#include "include/bindless.glsl"
#include "include/view.glsl"
#include "include/pbr_lighting.glsl"

layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 3, binding = 1) uniform texture2D in_gbuffer_position;
layout (set = 3, binding = 2) uniform texture2D in_gbuffer_normal;
layout (set = 3, binding = 3) uniform texture2D in_gbuffer_pbr;
layout (set = 3, binding = 4) uniform textureCube in_irradiance_map;
layout (set = 3, binding = 5) uniform textureCube in_specular_map;
layout (set = 3, binding = 6) uniform texture2D in_brdf_lut;
layout(set = 3, binding = 7, rgba8) uniform image2D output_image;

layout(location = 0) rayPayloadEXT vec3 rayPayload;

void main()
{
   vec3 pixelColor = vec3(1.0);

   const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
   vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

   vec3 origin = texture(sampler2D(in_gbuffer_position, defaultSampler), inUV).xyz;
   vec3 normal = texture(sampler2D(in_gbuffer_normal, defaultSampler), inUV).xyz;
   origin.xyz = offsetRay(origin.xyz, normal.xyz);

   vec3 toEye = normalize(view.eye_pos - origin.xyz);
   vec3 reflectDir = reflect(-toEye, normal.xyz);

   uint material_index = uint(texture(sampler2D(in_gbuffer_pbr, defaultSampler), inUV).a);
   Material material = materialsSSBO.materials[material_index];

   // Metal
   if (material.raytrace_properties.x == 1) {
      float tmin = 0.001;
      float tmax = 10000.0;

      traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT,
                  0xff, 0, 0, 0, origin.xyz, tmin, reflectDir, tmax, 0);
      
      imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(rayPayload, 0.0));
   }
   else {
      imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
   }
}
