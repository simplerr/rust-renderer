#version 460
#extension GL_EXT_ray_tracing : enable

#include "include/bindless.glsl"
#include "include/view.glsl"

layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 3, binding = 1) uniform texture2D in_gbuffer_position;
layout (set = 3, binding = 2) uniform texture2D in_gbuffer_normal;
layout(set = 3, binding = 3, rgba8) uniform image2D output_image;

layout(location = 0) rayPayloadEXT bool rayPayload;

void main()
{
   vec3 pixelColor = vec3(1.0);

   const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
   vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);

   vec3 origin = texture(sampler2D(in_gbuffer_position, defaultSampler), inUV).xyz;
   vec3 normal = texture(sampler2D(in_gbuffer_normal, defaultSampler), inUV).xyz;
   origin.xyz = offsetRay(origin.xyz, normal.xyz);

   vec3 light_dir = normalize(view.sun_dir);

   float tmin = 0.001;
   float tmax = 10000.0;

   rayPayload = true;
   traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsTerminateOnFirstHitEXT,
               0xff, 0, 0, 0, origin.xyz, tmin, light_dir, tmax, 0);

   if (rayPayload) {
      pixelColor = vec3(0.0);
   }

   imageStore(output_image, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0.0));
}
